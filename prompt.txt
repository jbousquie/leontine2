# Leontine Transcription Client

Leontine is a responsive web application built with Rust and the Dioxus framework (v0.6). It serves as a user-friendly client for an audio transcription service powered by the [WhisperX API](https://github.com/jbousquie/whisper_api).

## Project Status

The application is under active development. The core infrastructure for settings management and real-time API monitoring is complete. The next phase focuses on implementing the transcription workflow.

> **⚠️ WARNING: Architecture Simplification in Progress**
> The current architecture is overly complex for such a simple application. We are working on significant simplifications: 3 core components with a single shared state (each component limited to updating only its own data), one cycling process to request API status, and one terminable cycling process to request job status when needed.

## Core Features

The user interface is composed of two main functional components:

### 1. Settings Panel
- **API URL Configuration**: Allows the user to set and save the base URL for the WhisperX API endpoint.
- **Persistent State**: The configured URL is saved to the browser's `localStorage` and persists across sessions, providing a seamless user experience.
- **Robust Form Handling**: Implements a "two-signal" pattern to differentiate between the value being edited and the saved value, with clear visual feedback when changes are saved.

### 2. API Status Panel
- **Real-time Status Monitoring**: Automatically checks the API status upon loading and then periodically every 30 seconds.
- **Visual Feedback**: Displays a color-coded flag (green for online, red for error, gray for not configured) to give an at-a-glance indication of the API's health.
- **Queue Information**: Fetches and displays the number of jobs currently in the queue and being processed by the API.
- **Last Checked Timestamp**: Shows a human-readable timestamp (`HH:MM:SS`) for the last successful or failed status check.
- **Manual Refresh**: Includes a "Refresh Status" button to allow users to trigger an immediate status check on demand.
- **Reactive Updates**: The status check cycle automatically respects changes made to the API URL in the settings panel.

## Technical Architecture

The application is built on modern Rust and Dioxus patterns with a focus on simplicity.

### Key Implementation Patterns
- **Simplified Component Structure**: The application consists of only 3 essential components:
  1. **SettingsPanel**: Manages API configuration
  2. **ApiStatusDisplay**: Shows the current status of the API
  3. **TranscriptionPanel**: Handles file uploading and job monitoring
- **Centralized State Management**: A single shared `AppState` with clear ownership boundaries - each component is only permitted to update its own section of the shared state.
- **Minimalist Polling Strategy**:
  1. One simple polling process for API status that runs at regular intervals
  2. One terminable job status polling process that only activates when a transcription job is submitted
- **Simplified Lifecycle Management**: Clear separation between component initialization, operation, and cleanup phases
- **Predictable Data Flow**: One-way data flow with clear state update procedures to avoid infinite loops and race conditions

### Core Dependencies
- `dioxus = { version = "0.6.3", features = ["web"] }`
- `gloo` (timers, storage, net)
- `serde` / `serde_json` for serialization
- `chrono` for time formatting
- `wasm-logger` for browser console logging
- `wasm-bindgen-futures` for asynchronous operations

## Future Roadmap

1.  ✅ Settings panel with `localStorage` persistence.
2.  ✅ Real-time API status panel with periodic and manual updates.
3.  ✅ Robust, shared state management via "lifting state up" pattern.
4.  ⬜ **File Upload**: Implement a drag-and-drop area for audio files.
5.  ⬜ **Transcription Status**: Track the progress of active transcription jobs.
6.  ⬜ **Results Download**: Allow users to download completed transcripts.
