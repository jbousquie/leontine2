# Leontine Transcription Client

Leontine is a responsive web application built with Rust and the Dioxus framework (v0.6). It serves as a user-friendly client for an audio transcription service powered by the [WhisperX API](https://github.com/jbousquie/whisper_api).

## Project Status

The application is under active development. The core infrastructure for settings management and real-time API monitoring is complete. The next phase focuses on implementing the transcription workflow.

## Core Features

The user interface is composed of two main functional components:

### 1. Settings Panel
- **API URL Configuration**: Allows the user to set and save the base URL for the WhisperX API endpoint.
- **Persistent State**: The configured URL is saved to the browser's `localStorage` and persists across sessions, providing a seamless user experience.
- **Robust Form Handling**: Implements a "two-signal" pattern to differentiate between the value being edited and the saved value, with clear visual feedback when changes are saved.

### 2. API Status Panel
- **Real-time Status Monitoring**: Automatically checks the API status upon loading and then periodically every 30 seconds.
- **Visual Feedback**: Displays a color-coded flag (green for online, red for error, gray for not configured) to give an at-a-glance indication of the API's health.
- **Queue Information**: Fetches and displays the number of jobs currently in the queue and being processed by the API.
- **Last Checked Timestamp**: Shows a human-readable timestamp (`HH:MM:SS`) for the last successful or failed status check.
- **Manual Refresh**: Includes a "Refresh Status" button to allow users to trigger an immediate status check on demand.
- **Reactive Updates**: The status check cycle automatically respects changes made to the API URL in the settings panel.

## Technical Architecture

The application is built on modern Rust and Dioxus patterns.

### Key Implementation Patterns
- **Component-Based UI**: The application is broken down into modular, reusable components (`SettingsPanel`, `ApiStatus`).
- **Reactive State Management**: State is managed primarily through Dioxus signals (`use_signal`).
- **Asynchronous Operations**: The `use_resource` hook is used to handle asynchronous API calls in a reactive and idiomatic way.
- **Lifecycle Management**:
    - `use_hook` is leveraged for one-time setup logic, such as initializing timers.
    - `use_drop` provides a dedicated hook for safe, guaranteed cleanup (e.g., clearing timers) when a component unmounts.
- **Custom Hooks**: A `use_persistent` hook abstracts away the logic for interacting with `localStorage`, making state persistence clean and reusable.
- **WASM-Compatible Timers**: Uses `gloo-timers` (`Timeout`, `Interval`) for time-based events, triggered by a `refresh_trigger` signal to integrate with the reactive system.

### Core Dependencies
- `dioxus = { version = "0.6.3", features = ["web"] }`
- `gloo` (timers, storage, net)
- `serde` / `serde_json` for serialization
- `chrono` for time formatting
- `wasm-logger` for browser console logging

## Future Roadmap

1.  ✅ Settings panel with `localStorage` persistence.
2.  ✅ Real-time API status panel with periodic and manual updates.
3.  ⬜ **File Upload**: Implement a drag-and-drop area for audio files.
4.  ⬜ **Transcription Status**: Track the progress of active transcription jobs.
5.  ⬜ **Results Download**: Allow users to download completed transcripts.
